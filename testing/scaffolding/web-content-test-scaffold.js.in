/*jslint browser: true */
/*globals phantom */

// This is a script for PhantomJS to run.  It fetches a webpage and renders it
// either as HTML or as plain text, depending on the second parameter.

var system = require('system');
var fs = require("fs");
var page = require('webpage').create();

var testingParams = {
    cmakeBinaryDir: "@CMAKE_BINARY_DIR@",
    cmakeSourceDir: "@CMAKE_SOURCE_DIR@",
    host: "@TESTING_HOST@",
    port: "@TESTING_PORT@"
};

// A promise-type object that can be used to abstract away asynchrounous calls
// made during the test function (e.g., image object construction in the
// compareImages() function).
function Promise(callback) {
    "use strict";

    return {
        then: function (deliver) {
            callback(deliver);
        }
    };
}

// An object that will contain useful metadata to be passed to the test
// function.
var info = {
    url: null,
    status: null,
    statusText: null,

    size: {
        width: 1024,
        height: 768
    },

    image: {}
};

function declareTest(cfg) {
    "use strict";

    var filename,
        name;

    // Record the requested width and height.
    info.width = (cfg.size && cfg.size.width) || 1024;
    info.height = (cfg.size && cfg.size.height) || 768;

    // Set the PhantomJS page size.
    page.viewportSize = {
        width: info.width,
        height: info.height
    };

    // Capture the list of requested baseline images.
    cfg.imageFiles = cfg.imageFiles || {};
    info.image = {};

    for (name in cfg.imageFiles) {
        if (cfg.imageFiles.hasOwnProperty(name)) {
            filename = cfg.imageFiles[name]
                .replace("${CMAKE_BINARY_DIR}", testingParams.cmakeBinaryDir)
                .replace("${CMAKE_SOURCE_DIR}", testingParams.cmakeSourceDir);
            info.image[name] = "data:image/png;base64," + window.btoa(fs.open(filename, "rb").read());
        }
    }
}


// Interpolate the user's test declaration to extract the information above
// (page size, list of image files).
@TEST_SUITE@

// Route "console.log()" calls from within the Page context to the main Phantom
// context (i.e. current "this")
page.onConsoleMessage = function (msg) {
    "use strict";

    console.log(msg);
};

// Capture the status code for the target url in this callback.  Look for a
// match in the "url" field and for "stage" to be "end" - this will distinguish
// the final status code for the url itself, from those for other requested
// resource within the page (images, etc.).
page.onResourceReceived = function (response) {
    "use strict";

    if (response.url === info.url && response.stage === "end") {
        // Log the status code and message.
        info.status = response.status;
        info.statusText = response.statusText;

        if (info.status === "null") {
            console.log("error: received null status code from url " + info.url);
            phantom.exit(1);
        }

        // Unregister this callback, since we have received the answer we were
        // looking for.
        page.onResourceReceived = undefined;
    }
};

// The test runner, which prepares some metadata (in the "info" object), loads
// the requested url into the PhantomJS page object, then invokes the user's
// testing function on the page object and metadata object.
var runner = function () {
    "use strict";

    var waittime,
        totalwait,
        test;

    // Process the image files.
    page.evaluate(function (imageData) {
        var name,
            div,
            img;

        div = document.createElement("div");
        div.setAttribute("id", "phantomtestdiv");
        div.setAttribute("style", "display:none");
        document.body.appendChild(div);

        for (name in imageData) {
            if (imageData.hasOwnProperty(name)) {
                img = new Image();
                img.setAttribute("id", name);
                img.src = imageData[name];
                div.appendChild(img);
            }
        }
    }, info.image);

    // Wait for all the images to load.
    waittime = 500;
    totalwait = 0;
    window.setInterval(function () {
        var complete;

        if (totalwait > 10000) {
            console.log("error: timed out waiting for all baseline images to load");
            phantom.exit(1);
        }

        // Check the page to see if all the images are loaded, and abort if
        // not.
        complete = page.evaluate(function () {
            var div = document.getElementById("phantomtestdiv"),
                child,
                i;

            for (i = 0; i < div.children.length; i += 1) {
                child = div.children[i];
                if (!child.complete) {
                    return false;
                }
            }

            return true;
        });

        if (!complete) {
            console.log("incomplete");
            return;
        }

        // Launch a page.evaluate() context, create CanvasImages from the hidden
        // image tags, delete the hidden div, and run the user test function.
        page.includeJs("http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js", function () {
            var result = page.evaluate(function (info, testingParams) {
                // A canvas abstraction object, meant to make it easier to
                // manipulate images in JavaScript.
                function CanvasImage(width, height) {
                    var otherImage,
                        canvas,
                        ctx;

                    // Initialize a new canvas element.
                    canvas = document.createElement("canvas");
                    ctx = canvas.getContext("2d");

                    // Interpret the arguments, if there are any.  If not, just use the defaults
                    // (the user may wish to load a PNG file in later, for example).
                    if (typeof width === "object") {
                        otherImage = width;
                        width = otherImage.width();
                        height = otherImage.height();
                    } else {
                        width = width || 300;
                        height = height || 150;
                    }

                    // Set the initial dimensions of the canvas element.
                    canvas.width = width;
                    canvas.height = height;

                    // If this was initialized with another CanvasImage object, copy its image
                    // into this object.
                    if (otherImage) {
                        ctx.drawImage(otherImage.canvas, 0, 0);
                    }

                    // The interface object.
                    return {
                        getPixels: function () {
                            console.log(canvas.width);
                            console.log(canvas.height);
                            return ctx.getImageData(0, 0, canvas.width, canvas.height);
                        },

                        clearPixels: function () {
                            var pels = this.getPixels(),
                                i;

                            // Set all pixels to black, with an alpha of 1.0.
                            for (i = 0; i < pels.length / 4; i += 1) {
                                pels[4 * i + 0] = 0;
                                pels[4 * i + 1] = 0;
                                pels[4 * i + 2] = 0;
                                pels[4 * i + 3] = 255;
                            }
                        },

                        getWidth: function () {
                            return canvas.width;
                        },

                        setWidth: function (w) {
                            canvas.width = w;
                        },

                        getHeight: function () {
                            return canvas.h;
                        },

                        setHeight: function (h) {
                            canvas.height = h;
                        },

            /*            loadPNG: function (filename) {*/
                            //var that = this;

                            //return new Promise(function (deliver) {
                                //var img = new Image();

                                //console.log("3");

                                //// Set the base64 encdoded PNG data as the image source,
                                //// then copy it into the canvas object.
                                //img.onload = function () {
                                    //that.setWidth(img.width);
                                    //that.setHeight(img.height);

                                    //ctx.drawImage(img, 0, 0);

                                    //deliver();
                                //};
                                //console.log("4");
                                //img.src = "data:image/png;base64," + window.btoa(fs.open(filename, "rb").read());
                            //});
                        //},

            /*            savePNG: function (filename) {*/
                            //var b64;

                            //b64 = canvas.toDataURL().split(",")[1];
                            //fs.write(filename, window.atob(b64), "wb");
                        //},

                        drawFromElement: function (elem) {
                            canvas.width = elem.width;
                            canvas.height = elem.height;
                            ctx.drawImage(elem, 0, 0);
                        }
                    };
                }

                function diffImage(img1, img2) {
                    var diff,
                        i,
                        pels = [null, null, null];

                    if (img1.getWidth() !== img2.getWidth() || img1.getHeight() !== img2.getHeight()) {
                        return null;
                    }

                    // Create a new CanvasImage object of the same dimension as the input
                    // images.
                    diff = new CanvasImage(img1);
                    diff.clearPixels();

                    // Loop through the pixels and compute the RGB difference (but set the alpha
                    // to 1.0).
                    pels[0] = diff.getPixels();
                    pels[1] = img1.getPixels();
                    pels[2] = img2.getPixels();
                    for (i = 0; i < pels[0].length / 4; i += 1) {
                        pels[0][4 * i + 0] = Math.abs(pels[1][4 * i + 0] - pels[1][4 * i + 0]);
                        pels[0][4 * i + 1] = Math.abs(pels[1][4 * i + 1] - pels[1][4 * i + 1]);
                        pels[0][4 * i + 2] = Math.abs(pels[1][4 * i + 2] - pels[1][4 * i + 2]);
                        pels[0][4 * i + 3] = 255;
                    }

                    return diff;
                }

                function L2(img) {
                    var pels = img.getPixels(),
                        mag = 0.0,
                        i;

                    for (i = 0; i < pels.length; i += 1) {
                        if (i % 4 !== 3) {
                            mag += pels[i] * pels[i];
                        }
                    }

                    return Math.sqrt(mag);
                }

                var div = document.getElementById("phantomtestdiv"),
                    child,
                    name,
                    i;

                info = {
                    testName: "",

                    url: null,
                    method: null,
                    data: null,

                    status: null,
                    statusText: null,

                    image: {},
                    threshold: 0.0,

                    size: {
                        width: 1024,
                        height: 768
                    }
                };

                function declareTest(cfg) {
                    info.name = cfg.name;
                    info.url = "http://" + testingParams.host + ":" + testingParams.port + cfg.url;

                    if (cfg.threshold) {
                        info.threshold = cfg.threshold;
                    }

                    info.method = cfg.method;

                    info.data = cfg.data;

                    test = cfg.test;
                }

                // Repeat this interpolation here to capture the testing function,
                // etc., within the webpage context.
                @TEST_SUITE@

                // Print information about this test to the console.
                console.log("url: " + info.url);
                if (info.method) {
                    console.log("method: " + info.method);
                }
                if (info.data) {
                    console.log("data: " + JSON.stringify(info.data, null, 4));
                }
                if (info.imageFile) {
                    console.log("image file: " + info.imageFile);
                }
                console.log("");

                // Prepare the CanvasImages.
                for (i = 0; i < div.children.length; i += 1) {
                    child = div.children[i];
                    name = child.getAttribute("id");

                    info.image[name] = new CanvasImage();
                    info.image[name].drawFromElement(child);
                }

                // Remove the phantom div from the DOM.
                document.body.removeChild(div);

                // Run the test function and return whatever it returns.  The value
                // can't be processed here because we are still inside the webpage
                // sandbox.
                return test(info);
            }, info, testingParams);

            // Make sure the test returned a boolean value.
            if (result !== true && result !== false) {
                console.log("error: test function did not return a boolean value!");
                console.log(result);
                phantom.exit(2);
            }

            // Exit with an appropriate code.
            phantom.exit(result ? 0 : 1);
        });
    }, waittime);

    function cdashReport(testimage, groundtruth, diffimage) {
        testimage = fs.absolute(testimage);
        groundtruth = fs.absolute(groundtruth);
        diffimage = fs.absolute(diffimage);

        console.log('<DartMeasurementFile name="TestImage" type="image/png">' + testimage + '</DartMeasurementFile>');
        console.log('<DartMeasurementFile name="DifferenceImage" type="image/png">' + diffimage + '</DartMeasurementFile>');
        console.log('<DartMeasurementFile name="ValidImage" type="image/png">' + groundtruth + '</DartMeasurementFile>');
    }

    // Print a success/failure message, and return an appropriate code to the
    // testing system (i.e., CTest).
    function report(passed) {
        console.log(passed ? "PASSED" : "FAILED");

        if (!passed && info.imageFile) {
            cdashReport(info.testImage + ".png", info.imageFile, info.testImage + "-diff.png");
        }

        phantom.exit(!passed);
    }
};

// Kick off the testing procedure by loading the requested url, and invoking the
// test runner on the resulting page object.  The different ways of doing this
// depend on whether an HTTP method and/or HTTP data was supplied for this test.
if (info.method && info.data) {
    page.open(info.url, info.method, info.data, runner);
} else if (info.method) {
    page.open(info.url, info.method, runner);
} else {
    page.open(info.url, runner);
}
