/*jslint browser: true */
/*globals phantom */

// This is a script for PhantomJS to run.  It fetches a webpage and renders it
// either as HTML or as plain text, depending on the second parameter.

var fs = require("fs");
var page = require('webpage').create();

var testingParams = {
    protocol: "http",
    cmakeBinaryDir: "@CMAKE_BINARY_DIR@",
    cmakeSourceDir: "@CMAKE_SOURCE_DIR@",
    host: "@TESTING_HOST@",
    port: "@TESTING_PORT@"
};

// An object that will contain useful metadata to be passed to the test
// function.
var info = {
    url: null,
    status: null,
    statusText: null,

    size: {
        width: 1024,
        height: 768
    },

    imageFiles: {},
    image: {}
};

// This extracts everything from the user's test config besides the testing
// function itself - that must be extracted later, within the page evaluation
// context, so this file actually contains two definitions of declareTest().
function declareTest(cfg) {
    "use strict";

    var filename,
        name;

    // Test name.
    info.name = cfg.name;

    // Set the url.
    info.url = testingParams.protocol + "://" + testingParams.host + ":" + testingParams.port + cfg.url;
    info.method = cfg.method;
    info.data = cfg.data;

    // The (optional) image test threshold.
    info.threshold = cfg.threshold;

    // Record the requested width and height.
    info.width = (cfg.size && cfg.size.width) || 1024;
    info.height = (cfg.size && cfg.size.height) || 768;

    // Set the PhantomJS page size.
    page.viewportSize = {
        width: info.width,
        height: info.height
    };

    // Capture the table of requested image data (read from disk now, in base64
    // encoding, before we lose this ability inside the evaluate() sandbox).
    cfg.imageFiles = cfg.imageFiles || {};
    info.image = {};
    for (name in cfg.imageFiles) {
        if (cfg.imageFiles.hasOwnProperty(name)) {
            filename = cfg.imageFiles[name]
                .replace("${CMAKE_BINARY_DIR}", testingParams.cmakeBinaryDir)
                .replace("${CMAKE_SOURCE_DIR}", testingParams.cmakeSourceDir);
            info.imageFiles[name] = filename;
            info.image[name] = "data:image/png;base64," + window.btoa(fs.open(filename, "rb").read());
        }
    }
}


// Interpolate the user's test declaration to extract the information in the
// above implementation of declareTest().
@TEST_SUITE@

// Route "console.log()" calls from within the Page context to the main Phantom
// context (i.e. current "this")
page.onConsoleMessage = function (msg) {
    "use strict";

    console.log(msg);
};

// Capture the status code for the target url in this callback.  Look for a
// match in the "url" field and for "stage" to be "end" - this will distinguish
// the final status code for the url itself, from those for other requested
// resource within the page (images, etc.).
page.onResourceReceived = function (response) {
    "use strict";

    if (response.url === info.url && response.stage === "end") {
        // Log the status code and message.
        info.status = response.status;
        info.statusText = response.statusText;

        if (info.status === "null") {
            console.log("error: received null status code from url " + info.url);
            phantom.exit(1);
        }

        // Unregister this callback, since we have received the answer we were
        // looking for.
        page.onResourceReceived = undefined;
    }
};

// The test runner, which prepares some metadata (in the "info" object), loads
// the requested url into the PhantomJS page object, then invokes the user's
// testing function within a page context, after preparing some "globals" that
// will be in the scope of the testing function.
var runner = function () {
    "use strict";

    var waittime,
        totalwait,
        test;

    // Process the image files.
    page.evaluate(function (imageData) {
        var name,
            div,
            img;

        // Create a hidden div in the webpage; this will be used to communicate
        // with the page context.  The user can, for instance, initiate requests
        // for file system activity by dropping elements with specific
        // attributes here.
        div = document.createElement("div");
        div.setAttribute("id", "phantomtestdiv");
        div.setAttribute("style", "display:none");
        document.body.appendChild(div);

        // Create img elements from the base64 image data previously gathered
        // from disk.
        for (name in imageData) {
            if (imageData.hasOwnProperty(name)) {
                img = new Image();
                img.setAttribute("id", name);
                img.src = imageData[name];
                div.appendChild(img);
            }
        }
    }, info.image);

    // Wait for all the images to load.
    waittime = 100;
    totalwait = 0;
    window.setInterval(function () {
        var complete,
            i,
            result;

        // Bail out if for some reason the images are taking far too long to
        // load.
        if (totalwait > 10000) {
            console.log("error: timed out waiting for all baseline images to load");
            phantom.exit(1);
        }

        // Check the page to see if all the images are loaded by probing their
        // "complete" property.
        complete = page.evaluate(function () {
            var div = document.getElementById("phantomtestdiv"),
                child,
                i;

            // If any single image is not ready yet, short circuit checking the
            // rest of them.
            for (i = 0; i < div.children.length; i += 1) {
                child = div.children[i];
                if (!child.complete) {
                    return false;
                }
            }

            // Reaching here means all the images are loaded.
            return true;
        });

        // Try this again after the specified wait, if any images remain to be
        // loaded.
        if (!complete) {
            console.log("Some images are not loaded yet, trying again...");
            return;
        }

        // Launch a page.evaluate() context, create CanvasImages from the hidden
        // image tags, delete the image tags, and run the user test function.
        result = page.evaluate(function (info, testingParams) {
            var div = document.getElementById("phantomtestdiv"),
                child,
                name,
                png = [],
                cdash = [],
                i;

            // A canvas abstraction object, meant to make it easier to
            // manipulate images in JavaScript.
            function CanvasImage(width, height) {
                var otherImage,
                    canvas,
                    ctx,
                    pels;

                // Initialize a new canvas element.
                canvas = document.createElement("canvas");
                ctx = canvas.getContext("2d");

                // Interpret the arguments, if there are any.  If not, just use the defaults
                // (the user may wish to load a PNG file in later, for example).
                if (typeof width === "object") {
                    otherImage = width;
                    width = otherImage.getWidth();
                    height = otherImage.getHeight();
                } else {
                    width = width || 300;
                    height = height || 150;
                }

                // Set the initial dimensions of the canvas element.
                canvas.width = width;
                canvas.height = height;

                // If this was initialized with another CanvasImage object, copy its image
                // into this object.
                if (otherImage) {
                    ctx.drawImage(otherImage.getCanvas(), 0, 0);
                }

                // Capture a reference to the ImageData object.
                pels = ctx.getImageData(0, 0, canvas.width, canvas.height);

                // The interface object.
                return {
                    getPixelArray: function () {
                        return pels.data;
                    },

                    getCanvas: function () {
                        return canvas;
                    },

                    numPixels: function () {
                        return pels.data.length / 4;
                    },

                    getPixel2d: function (i, j) {
                        return this.getPixel(i * canvas.width + j);
                    },

                    getPixel: function (i) {
                        return {
                            r: pels.data[4*i],
                            g: pels.data[4*i + 1],
                            b: pels.data[4*i + 2],
                            a: pels.data[4*i + 3]
                        };
                    },

                    setPixel2d: function (i, j, p) {
                        this.setPixel(i * canvas.width + j, p);
                    },

                    setPixel: function (i, p) {
                        pels.data[4*i] = p.r;
                        pels.data[4*i + 1] = p.g;
                        pels.data[4*i + 2] = p.b;
                        pels.data[4*i + 3] = p.a;
                    },

                    clearPixels: function () {
                        var i;

                        // Set all pixels to black, with an alpha of 1.0.
                        for (i = 0; i < pels.length / 4; i += 1) {
                            pels.data[4 * i + 0] = 0;
                            pels.data[4 * i + 1] = 0;
                            pels.data[4 * i + 2] = 0;
                            pels.data[4 * i + 3] = 255;
                        }

                        this.update();
                    },

                    update: function () {
                        ctx.putImageData(pels, 0, 0);
                    },

                    getWidth: function () {
                        return canvas.width;
                    },

                    setWidth: function (w) {
                        canvas.width = w;
                    },

                    getHeight: function () {
                        return canvas.height;
                    },

                    setHeight: function (h) {
                        canvas.height = h;
                    },

                    savePNG: function (filename) {
                        png.push({
                            filename: filename,
                            data: canvas.toDataURL().split(",")[1]
                        });
                    },

                    drawFromElement: function (elem) {
                        canvas.width = elem.width;
                        canvas.height = elem.height;
                        ctx.drawImage(elem, 0, 0);
                        pels = ctx.getImageData(0, 0, canvas.width, canvas.height);
                    }
                };
            }

            // This function constructs a CanvasImage representing the
            // difference image between two input images.
            //
            // If the input image dimensions do not match, a null object is
            // returned.
            //
            // To compute the pixel difference, the individual colors are
            // first scaled by their alpha values (i.e., the RGB part of the
            // color is blended with black via the A value), and then the L1
            // difference between them is taken.  This RGB triple is set in
            // the output image with an alpha of 255.
            function diffImage(img1, img2) {
                var p1,
                    p2,
                    i,
                    diff;

                if (img1.getWidth() !== img2.getWidth() || img1.getHeight() !== img2.getHeight()) {
                    return null;
                }

                diff = new CanvasImage(img1);

                for (i = 0; i < diff.numPixels(); i += 1) {
                    p1 = img1.getPixel(i);
                    p2 = img2.getPixel(i);

                    diff.setPixel(i, {
                        r: Math.floor(Math.abs(p1.r * p1.a - p2.r * p2.a) / 255),
                        g: Math.floor(Math.abs(p1.g * p1.a - p2.g * p2.a) / 255),
                        b: Math.floor(Math.abs(p1.b * p1.a - p2.b * p2.a) / 255),
                        a: 255
                    });
                }

                diff.update();
                return diff;
            }

            // This function computes the L2 norm of the RGB values in an
            // image.  This is mainly meant to measure the L2 image
            // difference between two images by invoking the function on a
            // difference image as computed by diffImage() above.
            function L2(img) {
                var pels = img.getPixelArray(),
                    mag = 0.0,
                    i;

                for (i = 0; i < pels.length; i += 1) {
                    if (i % 4 !== 3) {
                        mag += pels[i] * pels[i];
                    }
                }

                return Math.sqrt(mag);
            }

            function compareImages(cfg){
                var testImage = new CanvasImage(),
                    diff,
                    diffMag,
                    testElem = cfg.testElement,
                    baseline = cfg.baselineName,
                    basename = cfg.filenameBase,
                    threshold = cfg.threshold;

                // Load the test image from the specified element.
                testImage.drawFromElement(testElem);
                testImage.savePNG(basename + "-test.png");

                // Compute the difference image.
                diff = diffImage(testImage, info.image[baseline]);
                diff.savePNG(basename + "-diff.png");

                // Compute the diff image magnitude.
                diffMag = L2(diff);
                console.log("L2 magnitude of difference image: " + diffMag);

                // Emit a cdash report.
                cdashImage("TestImage", basename + "-test.png");
                cdashImage("DifferenceImage", basename + "-diff.png");
                cdashImage("ValidImage", info.imageFiles[baseline]);

                // Compare against the threshold and return the result.
                return diffMag < threshold;
            }

            // This function can be called to place a marker in the hidden
            // control div to emit XML information to CDash (after the test
            // is run, and only if the test fails).
            //
            // TODO: use a parameter to control whether the XML is emitted
            // only when the test fails, passes, or always.
            function cdashImage(name, file) {
                cdash.push({
                    name: name,
                    file: file,
                });
            }

            // Need to capture the test function here, as functions are not
            // JSON-serializable (for passing into the sandbox) - this is
            // why declareTest() is "redefined" here.
            function declareTest(cfg) {
                test = cfg.test;
            }

            // Repeat this interpolation here to capture the testing function,
            // etc., within the webpage context.
            @TEST_SUITE@

            // Print information about this test to the console.
            console.log("url: " + info.url);
            if (info.method) {
                console.log("method: " + info.method);
            }
            if (info.data) {
                console.log("data: " + JSON.stringify(info.data, null, 4));
            }
            if (info.imageFile) {
                console.log("image file: " + info.imageFile);
            }
            console.log("");

            // Prepare the CanvasImages, and remove the image elements as we
            // copy them.
            for (i = 0; i < div.children.length; i += 1) {
                child = div.children[i];
                name = child.getAttribute("id");

                info.image[name] = new CanvasImage();
                info.image[name].drawFromElement(child);
            }
            document.body.removeChild(div);

            // Capture the test function result.  The value can't be
            // processed here because we are still inside the webpage
            // sandbox.
            return {
                outcome: test(),
                png: png,
                cdash: cdash
            };
        }, info, testingParams);

        // Make sure the test returned a boolean value.
        if (result.outcome !== true && result.outcome !== false) {
            console.log("error: test function did not return a boolean value!");
            console.log(result.outcome);
            phantom.exit(2);
        }

        // Now write the images out to disk.
        for (i = 0; i < result.png.length; i += 1) {
            fs.write(result.png[i].filename, window.atob(result.png[i].data), "wb");
        }

        // And emit cdash xml if requested.
        if (!result.outcome) {
            for (i = 0; i < result.cdash.length; i += 1) {
                console.log('<DartMeasurementFile name="' + result.cdash[i].name + '" type="image/png">' + fs.absolute(result.cdash[i].file) + '</DartMeasurementFile>');
            }
        }

        // Exit with an appropriate code.
        phantom.exit(result ? 0 : 1);
    }, waittime);

    // Print a success/failure message, and return an appropriate code to the
    // testing system (i.e., CTest).
    function report(passed) {
        console.log(passed ? "PASSED" : "FAILED");
        phantom.exit(!passed);
    }
};

// Kick off the testing procedure by loading the requested url, and invoking the
// test runner on the resulting page object.  The different ways of doing this
// depend on whether an HTTP method and/or HTTP data was supplied for this test.
if (info.method && info.data) {
    page.open(info.url, info.method, info.data, runner);
} else if (info.method) {
    page.open(info.url, info.method, runner);
} else {
    page.open(info.url, runner);
}
