import subprocess
import sys
import time


def main():
    # Start tangelo on the testing port, and bail out with error if it fails.
    p = subprocess.Popen(["@VENV_DIR@/bin/tangelo",
                          "--host", "@TESTING_HOST@",
                          "--port", "@TESTING_PORT@",
                          "--root", "tangelo/www"],
                         stderr=subprocess.PIPE)

    # Wait until tangelo either starts or fails.
    #
    # TODO: there is a possibility of hanging here.  If, for some reason,
    # neither the success nor failure messages occur in the log, the call to
    # readline() below will eventually stop, waiting for input that won't come.
    # When Tangelo is healthy, however, one of the two sought messages will
    # occur.
    buf = []
    while True:
        line = p.stderr.readline()
        buf.append(line)
        if line.endswith("ENGINE Bus STARTED\n"):
            break
        elif line.endswith("ENGINE Bus EXITED\n"):
            print "fatal error: could not start Tangelo on port @TESTING_PORT@"
            print "".join(buf)
            return 1
        elif p.poll() is not None:
            print "fatal error: Tangelo did not start up correctly"
            print "".join(buf)
            return 1

    # Run the testing command, which is simply the arguments passed to this
    # script.  Hang onto the return value so it can be returned after server
    # shutdown.
    result = subprocess.call(sys.argv[1:])

    # Shut the server down.
    p.terminate()

    # Wait for the Tangelo process to actually exit, timing out after 10
    # seconds.
    start = time.time()
    now = time.time()
    while now - start < 10:
        retcode = p.poll()
        if retcode is not None:
            break
        time.sleep(0.5)

    # If there was an error shutting down, report it, kill Tangelo forcefully,
    # and fail the test.
    if retcode is None:
        print "fatal error: could not shut down Tangelo after test finished"
        p.kill()
        return 1

    # Return the result of running the test.
    return result

if __name__ == "__main__":
    sys.exit(main())
